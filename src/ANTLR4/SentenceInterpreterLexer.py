# Generated from ./src/ANTLR4/SentenceInterpreter.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,88,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,39,8,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,49,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,3,7,62,8,7,1,8,1,8,1,8,1,8,1,8,3,8,69,8,8,1,9,1,9,1,10,1,
        10,1,11,1,11,5,11,77,8,11,10,11,12,11,80,9,11,1,12,4,12,83,8,12,
        11,12,12,12,84,1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,1,0,4,1,0,97,122,1,0,65,90,2,0,65,
        90,97,122,3,0,9,10,13,13,32,32,93,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,38,1,0,0,0,9,48,1,0,
        0,0,11,50,1,0,0,0,13,53,1,0,0,0,15,61,1,0,0,0,17,68,1,0,0,0,19,70,
        1,0,0,0,21,72,1,0,0,0,23,74,1,0,0,0,25,82,1,0,0,0,27,28,5,40,0,0,
        28,2,1,0,0,0,29,30,5,41,0,0,30,4,1,0,0,0,31,32,5,44,0,0,32,6,1,0,
        0,0,33,39,5,8704,0,0,34,35,5,47,0,0,35,36,5,97,0,0,36,37,5,108,0,
        0,37,39,5,108,0,0,38,33,1,0,0,0,38,34,1,0,0,0,39,8,1,0,0,0,40,49,
        5,8707,0,0,41,42,5,47,0,0,42,43,5,101,0,0,43,44,5,120,0,0,44,45,
        5,105,0,0,45,46,5,115,0,0,46,47,5,116,0,0,47,49,5,115,0,0,48,40,
        1,0,0,0,48,41,1,0,0,0,49,10,1,0,0,0,50,51,5,61,0,0,51,52,5,62,0,
        0,52,12,1,0,0,0,53,54,5,60,0,0,54,55,5,61,0,0,55,56,5,62,0,0,56,
        14,1,0,0,0,57,62,5,8744,0,0,58,59,5,47,0,0,59,60,5,111,0,0,60,62,
        5,114,0,0,61,57,1,0,0,0,61,58,1,0,0,0,62,16,1,0,0,0,63,69,5,8743,
        0,0,64,65,5,47,0,0,65,66,5,97,0,0,66,67,5,110,0,0,67,69,5,100,0,
        0,68,63,1,0,0,0,68,64,1,0,0,0,69,18,1,0,0,0,70,71,5,45,0,0,71,20,
        1,0,0,0,72,73,7,0,0,0,73,22,1,0,0,0,74,78,7,1,0,0,75,77,7,2,0,0,
        76,75,1,0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,24,1,
        0,0,0,80,78,1,0,0,0,81,83,7,3,0,0,82,81,1,0,0,0,83,84,1,0,0,0,84,
        82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,6,12,0,0,87,26,1,0,
        0,0,7,0,38,48,61,68,78,84,1,6,0,0
    ]

class SentenceInterpreterLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    ALL = 4
    EXISTS = 5
    IMPLICATION = 6
    BICONDITIONAL = 7
    OR = 8
    AND = 9
    NOT = 10
    ID = 11
    PREDICATE = 12
    IGNORED = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'=>'", "'<=>'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ALL", "EXISTS", "IMPLICATION", "BICONDITIONAL", "OR", "AND", 
            "NOT", "ID", "PREDICATE", "IGNORED" ]

    ruleNames = [ "T__0", "T__1", "T__2", "ALL", "EXISTS", "IMPLICATION", 
                  "BICONDITIONAL", "OR", "AND", "NOT", "ID", "PREDICATE", 
                  "IGNORED" ]

    grammarFileName = "SentenceInterpreter.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


